Netcat is the utility knife of networking, so it¡¯s no surprise that shrewd
systems administrators remove it from their systems. On more than one
occasion, I¡¯ve run into servers that do not have netcat installed but do
have Python. In these cases, it¡¯s useful to create a simple network client
and server that you can use to push files, or to have a listener that gives you
command-line access. If you¡¯ve broken in through a web application, it is
definitely worth dropping a Python callback to give you secondary access
without having to first burn one of your trojans or backdoors. Creating a
tool like this is also a great Python exercise, so let¡¯s get started.
Pivoting with BHNET is pretty handy, but sometimes it¡¯s wise to encrypt
your traffic to avoid detection. A common means of doing so is to tunnel
the traffic using Secure Shell (SSH). But what if your target doesn¡¯t have
an SSH client (like 99.81943 percent of Windows systems)?
While there are great SSH clients available for Windows, like Putty,
this is a book about Python. In Python, you could use raw sockets and
some crypto magic to create your own SSH client or server¡ªbut why
create when you can reuse? Paramiko using PyCrypto gives you simple
access to the SSH2 protocol.
To learn about how this library works, we¡¯ll use Paramiko to make
a connection and run a command on an SSH system, configure an SSH
server and SSH client to run remote commands on a Windows machine,
and finally puzzle out the reverse tunnel demo file included with Paramiko
to duplicate the proxy option of BHNET. Let¡¯s begin.
First, grab Paramiko using pip installer (or download it from http://
www.paramiko.org/):
Increasingly, antivirus solutions employ some form of sandboxing to
determine the behavior of suspicious specimens. Whether this sandbox
runs on the network perimeter, which is becoming more popular, or on
the target machine itself, we must do our best to avoid tipping our hand
to any defense in place on the target¡¯s network. 
We can use a few indicators to try to determine whether our trojan is executing within a sandbox.
We¡¯ll monitor our target machine for recent user input, 
including keystrokes and mouse-clicks.
Then we¡¯ll add some basic intelligence to look for keystrokes, mouseclicks, and double-clicks.
Our script will also try to determine if the sandbox operator is sending input repeatedly 
(i.e., a suspicious rapid successionof continuous mouse-clicks) in order to try to respond to rudimentary
sandbox detection methods. We¡¯ll compare the last time a user interacted
with the machine versus how long the machine has been running, which
should give us a good idea whether we are inside a sandbox or not.
 A typical machine has many interactions at some point during a day since it has
been booted, whereas a sandbox environment usually has no user interaction 
because sandboxes are typically used as an automated malware analysis technique.
We can then make a determination as to whether we would like to continue executing or not.
Let¡¯s start working on some sandbox detection code.
Open sandbox_detect.py and throw in the following code: